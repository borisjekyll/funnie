#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <sstream> // For converting numbers to strings

// Declare sprite class for tank
class Tank {
public:
    Tank(sf::Texture& texture) {
        sprite.setTexture(texture);
    }

    void setPosition(float x, float y) {
        sprite.setPosition(x, y);
    }

    void move(float dx, float dy) {
        sprite.move(dx, dy); // Move the sprite by a given offset
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }

private:
    sf::Sprite sprite;
};

// Declare sprite class for bullet
class Bullet {
public:
    Bullet(sf::Texture& texture, float angle) {
        sprite.setTexture(texture);
        sprite.setRotation(angle); // Set the rotation of the sprite according to the angle of the shot
    }

    void update(float deltaTime) {
        float rad = sprite.getRotation() * 3.14 / 180; // Convert degrees to radians
        float dx = speed * cos(rad) * deltaTime; // Calculate the horizontal movement
        float dy = speed * sin(rad) * deltaTime; // Calculate the vertical movement
        sprite.move(dx, dy); // Move the sprite by the calculated offset
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }

private:
    sf::Sprite sprite;
    float speed = 500.0f; // Pixels per second
};

int main() {
    // Create window
    sf::RenderWindow window(sf::VideoMode(800, 600), "Tank Game");

    // Load textures
    sf::Texture tankTexture;
    if (!tankTexture.loadFromFile("tank.png")) {
        return -1;
    }

    sf::Texture bulletTexture;
    if (!bulletTexture.loadFromFile("bullet.png")) {
        return -1;
    }

    sf::Texture backgroundTexture;
    if (!backgroundTexture.loadFromFile("background.png")) {
        return -1;
    }

    // Load font
    sf::Font font;
    if (!font.loadFromFile("arcade.ttf")) {
        return -1;
    }

    // Load sound
    sf::SoundBuffer buffer;
    if (!buffer.loadFromFile("shoot.wav")) {
        return -1;
    }

    sf::Sound sound;
    sound.setBuffer(buffer);

    // Create tank object
    Tank tank(tankTexture);
    tank.setPosition(window.getSize().x / 2, window.getSize().y / 2);

    // Create background sprite
    sf::Sprite background(backgroundTexture);

    // Create score text
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(32);
    scoreText.setFillColor(sf::Color::White);
    scoreText.setPosition(10, 10);

    // Create timer text
    sf::Text timerText;
    timerText.setFont(font);
    timerText.setCharacterSize(32);
    timerText.setFillColor(sf::Color::White);
    timerText.setPosition(window.getSize().x - 150, 10);

    // Create menu text
    sf::Text menuText;
    menuText.setFont(font);
    menuText.setCharacterSize(64);
    menuText.setFillColor(sf::Color::White);
    menuText.setString("Press Enter to start");
    menuText.setOrigin(menuText.getGlobalBounds().width / 2, menuText.getGlobalBounds().height / 2);
    menuText.setPosition(window.getSize().x / 2, window.getSize().y / 2);

    // Define speed and delta time variables
    float speed = 200.0f; // Pixels per second
    float deltaTime = 0.0f; // Time elapsed between frames

    // Define score and timer variables
    int score = 0; // The number of bullets fired
    float timer = 30.0f; // The time remaining in seconds
    bool gameOver = false; // The game over flag

    // Define menu and game state variables
    bool menu = true; // The menu state flag
    bool game = false; // The game state flag

    // Define bullet vector
    std::vector<Bullet> bullets; // A vector to store the bullets

    // Game loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            // Handle keyboard input for menu state
            if (menu && event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Enter) {
                    menu = false; // Exit the menu state
                    game = true; // Enter the game state
                }
            }

            // Handle keyboard input for game state
            if (game && event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Space) {
                    // Create a new bullet object
                    Bullet bullet(bulletTexture, tank.sprite.getRotation());
                    // Set the position of the bullet to the center of the tank
                    bullet.setPosition(tank.sprite.getPosition().x + tank.sprite.getGlobalBounds().width / 2,
                                       tank.sprite.getPosition().y + tank.sprite.getGlobalBounds().height / 2);
                    // Add the bullet to the vector
                    bullets.push_back(bullet);
                    // Play the sound
                    sound.play();
                    // Increase the score
                    score++;
                }
            }
        }

        // Get the delta time
        deltaTime = window.getFrameTime();

        // Update the game logic for game state
        if (game) {
            // Handle keyboard input for tank movement
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
                tank.move(0, -speed * deltaTime); // Move up
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
                tank.move(-speed * deltaTime, 0); // Move left
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
                tank.move(0, speed * deltaTime); // Move down
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
                tank.move(speed * deltaTime, 0); // Move right
            }

            // Update the bullets
            for (int i = 0; i < bullets.size(); i++) {
                bullets[i].update(deltaTime); // Update the position and rotation of the bullet
                // Check if the bullet is out of the window bounds
                if (bullets[i].sprite.getPosition().x < 0 ||
                    bullets[i].sprite.getPosition().x > window.getSize().x ||
                    bullets[i].sprite.getPosition().y < 0 ||
                    bullets[i].sprite.getPosition().y > window.getSize().y) {
                    // Remove the bullet from the vector
                    bullets.erase(bullets.begin() + i);
                }
            }

            // Update the timer
            timer -= deltaTime; // Decrease the timer by the delta time
            // Check if the timer is zero or less
            if (timer <= 0) {
                timer = 0; // Set the timer to zero
                gameOver = true; // Set the game over flag to true
                game = false; // Exit the game state
            }

            // Update the score text
            std::stringstream ss; // Create a string stream object
            ss << "Score: " << score; // Write the score to the stream
            scoreText.setString(ss.str()); // Set the string of the score text to the stream

            // Update the timer text
            std::stringstream ts; // Create another string stream object
            ts << "Time: " << (int)timer; // Write the timer to the stream
            timerText.setString(ts.str()); // Set the string of the timer text to the stream
        }

        // Update the menu logic for game over state
        if (gameOver) {
            // Update the menu text
            std::stringstream ms; // Create another string stream object
            ms << "Game Over\nScore: " << score << "\nPress Enter to restart"; // Write the game over message to the stream
            menuText.setString(ms.str()); // Set the string of the menu text to the stream
            menuText.setOrigin(menuText.getGlobalBounds().width / 2, menuText.getGlobalBounds().height / 2); // Set the origin of the menu text to the center of the text
            menuText.setPosition(window.getSize().x / 2, window.getSize().y / 2); // Set the position of the menu text to the center of the window
            menu = true; // Enter the menu state
        }

        // Clear window
        window.clear();

        // Draw background
        window.draw(background);

        // Draw tank
        tank.draw(window);

        // Draw bullets
        for (int i = 0; i < bullets.size(); i++) {
            bullets[i].draw(window);
        }

        // Draw score and timer text
        window.draw(scoreText);
        window.draw(timerText);

        // Draw menu text
        if (menu) {
            window.draw(menuText);
        }

        // Update window
        window.display();
    }

    return 0;
}
